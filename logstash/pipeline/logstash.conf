# This is a comment. You should use comments to describe
# parts of your configuration.
input { 
        beats {
                type => "beat-exception-log"
                port => 5000
        }
}

filter {
        if [type] == "beat-exception-log" {
                xml {
                        source => "Log"
                        target => "doc"
                        store_xml => false
                        xpath => [ 
                                "/Log/Level/text()", "Level",
                                "/Log/Logger/text()", "Logger",
                                "/Log/LogID/text()", "LogID",
                                "/Log/Machine/text()", "Machine",
                                "/Log/Message/text()", "Message",
                                "/Log/Exception/text()", "Exception",
                                "/Log/ExtendLogData/text()", "ExtendLogData"
                        ]
                }

                mutate {
                        copy => {"@timestamp" => "ImportTime"}
                        copy => {"Message" => "JSON_String"}
                        copy => {"Machine" => "TaskID"}
                }
                mutate {
                        gsub => [
                                "[Message]",'\s{2,}',' ',
                                "[Message]",'\r{1,}','',
                                "[Message]",'\n{1,}','',
                                "[Message]",'\"','"',
                                "[JSON_String]",'\s{2,}',' ',
                                "[JSON_String]",'\r{1,}','',
                                "[JSON_String]",'\n{1,}',''
                                #"[JSON_String]",'\"','"'
                        ]
                }

	        mutate {
                        rename => [
                                "[Logtime][0]","Logtime",
                                "[Level][0]","Level",
                                "[Logger][0]","Logger",
                                "[LogID][0]","LogID",
                                "[IP][0]","IP",
                                "[HttpURL][0]","HttpURL",
                                "[Headers][0]","Headers",
                                "[QueryParams][0]","QueryParams",
                                "[Machine][0]","Machine",
                                "[Message][0]","Message",
                                "[Exception][0]","Exception",
                                "[ExtendLogData][0]","ExtendLogData",
                                "[JSON_String][0]","JSON_String"
                        ]
                        gsub => [
                                "[Exception][0]","`"," ",
                                "[ExtendLogData][0]","`"," ",
                                "[HttpURL]","\<\!\[CDATA\[",'',
                                "[HttpURL]","\]\]\>","",
                                "[QueryParams]","\<\!\[CDATA\[",'',
                                "[QueryParams]","\]\]\>","",
                                "[Message]","\<\!\[CDATA\[",'',
                                "[Message]","\]\]\>","",
                                "[Message]","`"," ",
                                "[Message]",'\\r','',
                                "[Message]",'\\n','',
                                "[Message]",'\\"','"',
                                #"[JSON_String]",'\"','"',
                                "[JSON_String]",'\\\"','"',
                                "[JSON_String]",'\\r','',
                                "[JSON_String]",'\\n','',
                                "[JSON_String]",'"\{','{',
                                "[JSON_String]",'\}"','}',
                                "[JSON_String]",'\<\!\[CDATA\[','',
                                "[JSON_String]","\]\]\>","",
                                "[JSON_String]",'(.*)「','',
                                "[JSON_String]",'」(.*)',''
                        ]
                }

                mutate {
                        #convert => [ "[Logtime]" , "string"]
                        #remove_field => [ "message"]

                        gsub => [
                                "[Machine]","\[(.*)\]","",
                                "[TaskID]","(.*)\[","",
                                "[TaskID]","\]",""
                        ]
                }


                date {
                        match => [ "Logtime","yyyy/MM/dd HH:mm:ss","yyyy/MM/dd HH:mm:ss.SSS","yyyy/MM/dd HH:mm:ss:SSS" ]
                        timezone => "Asia/Taipei"
                        target => "@timestamp"
                }

                ruby {
                        code => "require 'digest/md5';
                        event.set('[scenario]',
                        Digest::MD5.hexdigest(
                                        event.get('[Message]')+
                                        event.get('[LogID]')  +
                                        event.get('[Logtime]')
                                        )
                        )"
                }


                if [JSON_String] =~ /^\{(.*)\}$/ {
                        json {
                                #source => "Message[0]"
                                source => "JSON_String"
                        }
                }
        }

        if "_xmlparsefailure" in [tags]{
                drop {}
        }

        if "_grokparsefailure" in [tags]{
                drop {}
        }

        #if "_jsonparsefailure" in [tags]{
        #        drop {}
        #}

        if [_id] == "%{scenario}" {
                drop {}
        }
}

output {

        stdout { codec => rubydebug }
        elasticsearch {
                hosts => "elasticsearch:9200"
                index => "%{type}-%{+YYYY.MM.dd}"
        }

}
